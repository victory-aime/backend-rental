// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  name            String
  firstName       String?
  address         String?
  shippingAddress String?
  email           String   @unique
  password        String
  phone           String?  @unique
  refreshToken    String?
  role            Role     @default(USER)
  store           Store? // Un utilisateur peut 1 et 1 seule boutique
  orders          Order[] // Un utilisateur peut passer plusieurs commandes
  reviews         Review[] // Un utilisateur peut laisser plusieurs avis
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Store {
  id           String        @id @default(uuid())
  name         String
  description  String?
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String        @unique
  products     Product[]
  subscription Subscription? // Chaque boutique peut avoir un abonnement
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int           @default(0)
  category    Category      @relation(fields: [categoryId], references: [id])
  status      ProductStatus @default(DRAFT)
  variants    Variant[]

  categoryId String
  store      Store       @relation(fields: [storeId], references: [id])
  storeId    String
  orders     OrderItem[]
  reviews    Review[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Variant {
  id        String      @id @default(uuid())
  product   Product     @relation(fields: [productId], references: [id])
  productId String
  color     String? // Couleur de la variante (ex: Rouge, Bleu)
  size      String? // Taille de la variante (ex: S, M, L)
  stock     Int         @default(0) // Stock disponible pour cette variante
  price     Float? // Prix spécifique pour cette variante (sinon basePrice est utilisé)
  orders    OrderItem[] // Permet de savoir quelles variantes ont été commandées
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

//Model que le client voit avec les differentes limites 
model SubscriptionPlan {
  id           String         @id @default(uuid())
  name         String
  price        Float
  duration     Int // Durée en jours
  maxProducts  Int // Nombre maximum de produits pour ce plan
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model Subscription {
  id        String             @id @default(uuid())
  store     Store              @relation(fields: [storeId], references: [id])
  storeId   String             @unique
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
  planId    String
  startDate DateTime           @default(now())
  endDate   DateTime
  status    SubscriptionStatus @default(PENDING)
}

model Order {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]
  totalPrice Float
  status     OrderStatus @default(NEW)
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int // Note de 1 à 5
  comment   String?
  createdAt DateTime @default(now())
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  PAID
  DELIVERED
  CANCELED
}

enum ProductStatus {
  PUBLISH
  LOW_SCTOK
  OUT_STOCK
  DRAFT
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  EXPIRED
  CANCELED
}

enum Role {
  USER
  OWNER
  ADMIN
}
