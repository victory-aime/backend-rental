// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  name            String
  firstName       String?
  address         String?
  shippingAddress String?
  email           String         @unique
  password        String
  phone           String?        @unique
  refreshToken    String?
  role            Role           @default(USER)
  store           Store? // Un utilisateur peut 1 et 1 seule boutique
  orders          Order[] // Un utilisateur peut passer plusieurs commandes
  reviews         Review[] // Un utilisateur peut laisser plusieurs avis
  Notification    Notification[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String?
  price        Float
  stock        Int            @default(0)
  categoryName String
  status       ProductStatus  @default(DRAFT)
  images       ProductImage[]
  variants     Variant[]
  store        Store          @relation(fields: [storeId], references: [id])
  storeId      String
  orders       OrderItem[]
  reviews      Review[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime? // Soft delete
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  url       String
  isPrimary Boolean  @default(false) // Définit l'image principale
  createdAt DateTime @default(now())
}

model Variant {
  id         String      @id @default(uuid())
  product    Product     @relation(fields: [productId], references: [id])
  productId  String
  attributes Json? // Stocke les variantes sous forme JSON (ex: {"Taille": "M", "Couleur": "Rouge"})
  stock      Int         @default(0) // Stock disponible pour cette variante
  price      Float? // Prix spécifique pour cette variante (sinon basePrice est utilisé)
  orders     OrderItem[] // Permet de savoir quelles variantes ont été commandées
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

//Model que le client voit avec les differentes limites 
model Store {
  id            String         @id @default(uuid())
  name          String
  description   String?
  image         String?
  owner         User           @relation(fields: [ownerId], references: [id])
  ownerId       String         @unique
  products      Product[]
  subscriptions Subscription[] // Une boutique peut avoir plusieurs abonnements au fil du temps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}

model SubscriptionPlan {
  id                    String               @id @default(uuid())
  name                  SubscriptionPlanType @unique @default(BASIC)
  price                 Float
  duration              Int // Durée en jours
  maxProducts           Int // Nombre max de produits
  maxVariantsPerProduct Int? // Limite de variantes par produit
  maxImagesPerProduct   Int? // Limite d'images par produit
  maxCategories         Int? // Limite de catégories attribuables
  maxReviewsPerMonth    Int? // Limite d'avis laissés par mois
  maxOrdersPerMonth     Int? // Limite de commandes mensuelles
  canUseDiscounts       Boolean              @default(false) // Activation des réductions
  canAccessAnalytics    Boolean              @default(false) // Accès aux stats avancées
  prioritySupport       Boolean              @default(false) // Support prioritaire
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  subscriptions         Subscription[]
}

model Subscription {
  id         String             @id @default(uuid())
  store      Store              @relation(fields: [storeId], references: [id])
  storeId    String // Plus de @unique pour permettre plusieurs abonnements dans le temps
  plan       SubscriptionPlan   @relation(fields: [planId], references: [id])
  planId     String
  startDate  DateTime           @default(now())
  endDate    DateTime
  status     SubscriptionStatus @default(PENDING) // Gérer côté application qu’un store ait 1 seul abonnement "ACTIVE"
  canceledAt DateTime?
}

model Order {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]
  totalPrice Float
  status     OrderStatus @default(NEW)
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int // Note de 1 à 5
  comment   String?
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PROMOTION
  NEW_ORDER
}

//Model a reflechir car les livreurs n'existe pas
// model Shipment {
//   id         String        @id @default(uuid())
//   order      Order         @relation(fields: [orderId], references: [id])
//   orderId    String        @unique
//   trackingId String?       // Numéro de suivi du transporteur
//   carrier    String?       // Nom du transporteur
//   status     ShipmentStatus @default(PENDING)
//   estimatedDelivery DateTime?
//   createdAt  DateTime      @default(now())
//   updatedAt  DateTime      @updatedAt
// }

// enum ShipmentStatus {
//   PENDING
//   SHIPPED
//   IN_TRANSIT
//   DELIVERED
//   RETURNED
// }

enum OrderStatus {
  NEW
  IN_PROGRESS
  PAID
  DELIVERED
  CANCELED
}

enum ProductStatus {
  PUBLISH
  DRAFT
  DISABLED
}

enum SubscriptionPlanType {
  BASIC
  STANDARD
  PREMIUM
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  EXPIRED
  CANCELED
}

enum Role {
  USER
  OWNER
  ADMIN
}
